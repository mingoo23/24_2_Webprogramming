CREATE DATABASE IF NOT EXISTS Playlists;
USE Playlists;

-- playlist 테이블 생성
CREATE TABLE playlists (
    playlist_id INT AUTO_INCREMENT PRIMARY KEY, -- 플레이리스트 고유 ID
    user_id VARCHAR(255) NOT NULL,             -- 사용자 ID
    title VARCHAR(255) NOT NULL,               -- 플레이리스트 제목
    thumbnail VARCHAR(255),                    -- 썸네일 이미지
    song_count INT DEFAULT 0,                  -- 곡 개수
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- 생성 시간
);

-- songs 테이블 생성
CREATE TABLE songs (
    song_id INT AUTO_INCREMENT PRIMARY KEY,    -- 곡 고유 ID
    title VARCHAR(255) NOT NULL,               -- 곡 제목
    artist VARCHAR(255) NOT NULL,              -- 아티스트 이름
    duration TIME,                             -- 곡 길이 (HH:MM:SS)
    thumbnail VARCHAR(255)                     -- 썸네일 이미지 (선택)
);

CREATE TABLE playlist_songs (
    playlist_id INT NOT NULL,                  -- 연결된 플레이리스트 ID
    song_id INT NOT NULL,                      -- 연결된 곡 ID
    PRIMARY KEY (playlist_id, song_id),        -- 중복된 곡 방지
    FOREIGN KEY (playlist_id) REFERENCES playlists(playlist_id) ON DELETE CASCADE,
    FOREIGN KEY (song_id) REFERENCES songs(song_id) ON DELETE CASCADE
);
- 사용법
플레이리스트 삽입
INSERT INTO playlist (playlist_title) VALUES (”sample_title”);

곡 추가
INSERT INTO songs (song_id, playlist_id) VALUES ('https://youtu.be/example1', 1);
INSERT INTO songs (song_id, playlist_id) VALUES ('https://youtu.be/example2', 1);

-- login 
CREATE TABLE users (
    id VARCHAR(50) NOT NULL PRIMARY KEY, -- 사용자 ID (Primary Key)
    password VARCHAR(255) NOT NULL,      -- 비밀번호
    username VARCHAR(50) NOT NULL UNIQUE, -- 사용자 이름 (Unique)
    email VARCHAR(100),                  -- 이메일 (Optional)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- 생성 시간 (Default: 현재 시간)
);

-- friends 테이블 생성
CREATE TABLE friends (
    user_id VARCHAR(50) NOT NULL,        -- 친구를 추가한 사용자 ID
    friend_id VARCHAR(50) NOT NULL,      -- 추가된 친구 ID
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 친구 추가 시간
    PRIMARY KEY (user_id, friend_id),    -- 복합키 (중복 추가 방지)
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE
);